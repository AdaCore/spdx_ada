package SPDX.Exceptions is

   pragma Style_Checks (Off); --  Genrated code

   Version : constant String :="3.24.0";

   type Id is (
               Asterisk_exception,
               Asterisk_linking_protocols_exception,
               cryptsetup_OpenSSL_exception,
               fmt_exception,
               GCC_exception_2_0,
               GCC_exception_2_0_note,
               Gmsh_exception,
               GNAT_exception,
               GNOME_examples_exception,
               GNU_compiler_exception,
               openvpn_openssl_exception,
               GPL_3_0_interface_exception,
               GPL_3_0_linking_exception,
               GStreamer_exception_2005,
               GStreamer_exception_2008,
               Fawkes_Runtime_exception,
               u_boot_exception_2_0,
               PS_or_PDF_font_exception_20170817,
               gnu_javamail_exception,
               KiCad_libraries_exception,
               LGPL_3_0_linking_exception,
               DigiRule_FOSS_exception,
               libpri_OpenH323_exception,
               LLVM_exception,
               Linux_syscall_note,
               GPL_3_0_linking_source_exception,
               Qwt_exception_1_0,
               Id_389_exception,
               mif_exception,
               eCos_exception_2_0,
               CLISP_exception_2_0,
               Bison_exception_1_24,
               Bison_exception_2_2,
               Libtool_exception,
               LLGPL,
               LZMA_exception,
               OpenJDK_assembly_exception_1_0,
               Font_exception_2_0,
               OCaml_LGPL_linking_exception,
               GCC_exception_3_1,
               Bootloader_exception,
               SHL_2_0,
               Classpath_exception_2_0,
               PCRE2_exception,
               QPL_1_0_INRIA_2004_exception,
               RRDtool_FLOSS_exception_2_0,
               SANE_exception,
               stunnel_exception,
               SWI_exception,
               Swift_exception,
               Autoconf_exception_2_0,
               Autoconf_exception_generic,
               Autoconf_exception_macro,
               FLTK_exception,
               freertos_exception_2_0,
               Texinfo_exception,
               UBDL_exception,
               Universal_FOSS_exception_1_0,
               vsftpd_openssl_exception,
               WxWindows_exception_3_1,
               OCCT_exception_1_0,
               Autoconf_exception_3_0,
               Autoconf_exception_generic_3_0,
               i2p_gpl_java_exception,
               GPL_CC_1_0,
               Qt_LGPL_exception_1_1,
               SHL_2_1,
               x11vnc_openssl_exception,
               Qt_GPL_exception_1_0);

   type String_Access is not null access constant String;
   Img_Ptr : constant array (Id) of String_Access :=
     (
      Asterisk_exception => new String'("Asterisk-exception"),
      Asterisk_linking_protocols_exception => new String'("Asterisk-linking-protocols-exception"),
      cryptsetup_OpenSSL_exception => new String'("cryptsetup-OpenSSL-exception"),
      fmt_exception => new String'("fmt-exception"),
      GCC_exception_2_0 => new String'("GCC-exception-2.0"),
      GCC_exception_2_0_note => new String'("GCC-exception-2.0-note"),
      Gmsh_exception => new String'("Gmsh-exception"),
      GNAT_exception => new String'("GNAT-exception"),
      GNOME_examples_exception => new String'("GNOME-examples-exception"),
      GNU_compiler_exception => new String'("GNU-compiler-exception"),
      openvpn_openssl_exception => new String'("openvpn-openssl-exception"),
      GPL_3_0_interface_exception => new String'("GPL-3.0-interface-exception"),
      GPL_3_0_linking_exception => new String'("GPL-3.0-linking-exception"),
      GStreamer_exception_2005 => new String'("GStreamer-exception-2005"),
      GStreamer_exception_2008 => new String'("GStreamer-exception-2008"),
      Fawkes_Runtime_exception => new String'("Fawkes-Runtime-exception"),
      u_boot_exception_2_0 => new String'("u-boot-exception-2.0"),
      PS_or_PDF_font_exception_20170817 => new String'("PS-or-PDF-font-exception-20170817"),
      gnu_javamail_exception => new String'("gnu-javamail-exception"),
      KiCad_libraries_exception => new String'("KiCad-libraries-exception"),
      LGPL_3_0_linking_exception => new String'("LGPL-3.0-linking-exception"),
      DigiRule_FOSS_exception => new String'("DigiRule-FOSS-exception"),
      libpri_OpenH323_exception => new String'("libpri-OpenH323-exception"),
      LLVM_exception => new String'("LLVM-exception"),
      Linux_syscall_note => new String'("Linux-syscall-note"),
      GPL_3_0_linking_source_exception => new String'("GPL-3.0-linking-source-exception"),
      Qwt_exception_1_0 => new String'("Qwt-exception-1.0"),
      Id_389_exception => new String'("389-exception"),
      mif_exception => new String'("mif-exception"),
      eCos_exception_2_0 => new String'("eCos-exception-2.0"),
      CLISP_exception_2_0 => new String'("CLISP-exception-2.0"),
      Bison_exception_1_24 => new String'("Bison-exception-1.24"),
      Bison_exception_2_2 => new String'("Bison-exception-2.2"),
      Libtool_exception => new String'("Libtool-exception"),
      LLGPL => new String'("LLGPL"),
      LZMA_exception => new String'("LZMA-exception"),
      OpenJDK_assembly_exception_1_0 => new String'("OpenJDK-assembly-exception-1.0"),
      Font_exception_2_0 => new String'("Font-exception-2.0"),
      OCaml_LGPL_linking_exception => new String'("OCaml-LGPL-linking-exception"),
      GCC_exception_3_1 => new String'("GCC-exception-3.1"),
      Bootloader_exception => new String'("Bootloader-exception"),
      SHL_2_0 => new String'("SHL-2.0"),
      Classpath_exception_2_0 => new String'("Classpath-exception-2.0"),
      PCRE2_exception => new String'("PCRE2-exception"),
      QPL_1_0_INRIA_2004_exception => new String'("QPL-1.0-INRIA-2004-exception"),
      RRDtool_FLOSS_exception_2_0 => new String'("RRDtool-FLOSS-exception-2.0"),
      SANE_exception => new String'("SANE-exception"),
      stunnel_exception => new String'("stunnel-exception"),
      SWI_exception => new String'("SWI-exception"),
      Swift_exception => new String'("Swift-exception"),
      Autoconf_exception_2_0 => new String'("Autoconf-exception-2.0"),
      Autoconf_exception_generic => new String'("Autoconf-exception-generic"),
      Autoconf_exception_macro => new String'("Autoconf-exception-macro"),
      FLTK_exception => new String'("FLTK-exception"),
      freertos_exception_2_0 => new String'("freertos-exception-2.0"),
      Texinfo_exception => new String'("Texinfo-exception"),
      UBDL_exception => new String'("UBDL-exception"),
      Universal_FOSS_exception_1_0 => new String'("Universal-FOSS-exception-1.0"),
      vsftpd_openssl_exception => new String'("vsftpd-openssl-exception"),
      WxWindows_exception_3_1 => new String'("WxWindows-exception-3.1"),
      OCCT_exception_1_0 => new String'("OCCT-exception-1.0"),
      Autoconf_exception_3_0 => new String'("Autoconf-exception-3.0"),
      Autoconf_exception_generic_3_0 => new String'("Autoconf-exception-generic-3.0"),
      i2p_gpl_java_exception => new String'("i2p-gpl-java-exception"),
      GPL_CC_1_0 => new String'("GPL-CC-1.0"),
      Qt_LGPL_exception_1_1 => new String'("Qt-LGPL-exception-1.1"),
      SHL_2_1 => new String'("SHL-2.1"),
      x11vnc_openssl_exception => new String'("x11vnc-openssl-exception"),
      Qt_GPL_exception_1_0 => new String'("Qt-GPL-exception-1.0"));

   function Img (I : Id) return String
   is (Img_Ptr (I).all);

   Name_Ptr : constant array (Id) of String_Access :=
     (
      Asterisk_exception => new String'("Asterisk exception"),
      Asterisk_linking_protocols_exception => new String'("Asterisk linking protocols exception"),
      cryptsetup_OpenSSL_exception => new String'("cryptsetup OpenSSL exception"),
      fmt_exception => new String'("fmt exception"),
      GCC_exception_2_0 => new String'("GCC Runtime Library exception 2.0"),
      GCC_exception_2_0_note => new String'("GCC Runtime Library exception 2.0 - note variant"),
      Gmsh_exception => new String'("Gmsh exception>"),
      GNAT_exception => new String'("GNAT exception"),
      GNOME_examples_exception => new String'("GNOME examples exception"),
      GNU_compiler_exception => new String'("GNU Compiler Exception"),
      openvpn_openssl_exception => new String'("OpenVPN OpenSSL Exception"),
      GPL_3_0_interface_exception => new String'("GPL-3.0 Interface Exception"),
      GPL_3_0_linking_exception => new String'("GPL-3.0 Linking Exception"),
      GStreamer_exception_2005 => new String'("GStreamer Exception (2005)"),
      GStreamer_exception_2008 => new String'("GStreamer Exception (2008)"),
      Fawkes_Runtime_exception => new String'("Fawkes Runtime Exception"),
      u_boot_exception_2_0 => new String'("U-Boot exception 2.0"),
      PS_or_PDF_font_exception_20170817 => new String'("PS/PDF font exception (2017-08-17)"),
      gnu_javamail_exception => new String'("GNU JavaMail exception"),
      KiCad_libraries_exception => new String'("KiCad Libraries Exception"),
      LGPL_3_0_linking_exception => new String'("LGPL-3.0 Linking Exception"),
      DigiRule_FOSS_exception => new String'("DigiRule FOSS License Exception"),
      libpri_OpenH323_exception => new String'("libpri OpenH323 exception"),
      LLVM_exception => new String'("LLVM Exception"),
      Linux_syscall_note => new String'("Linux Syscall Note"),
      GPL_3_0_linking_source_exception => new String'("GPL-3.0 Linking Exception (with Corresponding Source)"),
      Qwt_exception_1_0 => new String'("Qwt exception 1.0"),
      Id_389_exception => new String'("389 Directory Server Exception"),
      mif_exception => new String'("Macros and Inline Functions Exception"),
      eCos_exception_2_0 => new String'("eCos exception 2.0"),
      CLISP_exception_2_0 => new String'("CLISP exception 2.0"),
      Bison_exception_1_24 => new String'("Bison exception 1.24"),
      Bison_exception_2_2 => new String'("Bison exception 2.2"),
      Libtool_exception => new String'("Libtool Exception"),
      LLGPL => new String'("LLGPL Preamble"),
      LZMA_exception => new String'("LZMA exception"),
      OpenJDK_assembly_exception_1_0 => new String'("OpenJDK Assembly exception 1.0"),
      Font_exception_2_0 => new String'("Font exception 2.0"),
      OCaml_LGPL_linking_exception => new String'("OCaml LGPL Linking Exception"),
      GCC_exception_3_1 => new String'("GCC Runtime Library exception 3.1"),
      Bootloader_exception => new String'("Bootloader Distribution Exception"),
      SHL_2_0 => new String'("Solderpad Hardware License v2.0"),
      Classpath_exception_2_0 => new String'("Classpath exception 2.0"),
      PCRE2_exception => new String'("PCRE2 exception"),
      QPL_1_0_INRIA_2004_exception => new String'("INRIA QPL 1.0 2004 variant exception"),
      RRDtool_FLOSS_exception_2_0 => new String'("RRDtool FLOSS exception 2.0"),
      SANE_exception => new String'("SANE Exception"),
      stunnel_exception => new String'("stunnel Exception"),
      SWI_exception => new String'("SWI exception"),
      Swift_exception => new String'("Swift Exception"),
      Autoconf_exception_2_0 => new String'("Autoconf exception 2.0"),
      Autoconf_exception_generic => new String'("Autoconf generic exception"),
      Autoconf_exception_macro => new String'("Autoconf macro exception"),
      FLTK_exception => new String'("FLTK exception"),
      freertos_exception_2_0 => new String'("FreeRTOS Exception 2.0"),
      Texinfo_exception => new String'("Texinfo exception"),
      UBDL_exception => new String'("Unmodified Binary Distribution exception"),
      Universal_FOSS_exception_1_0 => new String'("Universal FOSS Exception, Version 1.0"),
      vsftpd_openssl_exception => new String'("vsftpd OpenSSL exception"),
      WxWindows_exception_3_1 => new String'("WxWindows Library Exception 3.1"),
      OCCT_exception_1_0 => new String'("Open CASCADE Exception 1.0"),
      Autoconf_exception_3_0 => new String'("Autoconf exception 3.0"),
      Autoconf_exception_generic_3_0 => new String'("Autoconf generic exception for GPL-3.0"),
      i2p_gpl_java_exception => new String'("i2p GPL+Java Exception"),
      GPL_CC_1_0 => new String'("GPL Cooperation Commitment 1.0"),
      Qt_LGPL_exception_1_1 => new String'("Qt LGPL exception 1.1"),
      SHL_2_1 => new String'("Solderpad Hardware License v2.1"),
      x11vnc_openssl_exception => new String'("x11vnc OpenSSL Exception"),
      Qt_GPL_exception_1_0 => new String'("Qt GPL exception 1.0"));

   function Name (I : Id) return String
   is (Name_Ptr (I).all);

   function Valid_Id (Str : String) return Boolean;
   function From_Id (Str : String) return Id;

end SPDX.Exceptions;
